/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ledmouse;

import java.awt.Robot;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.InputEvent;
import java.awt.image.BufferedImage;
import java.awt.image.DataBufferByte;
import java.awt.image.WritableRaster;
import static java.lang.Long.max;
import static java.lang.Long.min;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ButtonGroup;
import org.opencv.core.Core;
import org.opencv.core.CvType;
import org.opencv.core.Mat;
import org.opencv.core.MatOfPoint;
import org.opencv.core.Scalar;
import org.opencv.highgui.HighGui;
import org.opencv.imgproc.Imgproc;
import org.opencv.imgproc.Moments;
import org.opencv.videoio.VideoCapture;

/**
 *
 * @author el safer
 */
public class MainFrame extends javax.swing.JFrame implements ActionListener{
    static{ System.loadLibrary(Core.NATIVE_LIBRARY_NAME); }
    /**
     * Creates new form MainFrame
     */
    long b1,b2;
    Viwer view;
    boolean op,mouse;
    VideoCapture cap;
    public volatile boolean isThread;
    volatile boolean flag=false;
    public MainFrame() {
        initComponents();
        groupRadios();
        initListeners();
    }
    private void groupRadios(){
        ButtonGroup BG=new ButtonGroup();
        BG.add(opRadio);
        BG.add(testRadio);
    }
    private void initListeners(){
        testRadio.addActionListener(this);
        opRadio.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                if(testRadio.isSelected())checkMouse.setEnabled(false);
                else checkMouse.setEnabled(true);
            }
        });
    }
    @Override
    public void actionPerformed(ActionEvent ae){
        if(testRadio.isSelected())checkMouse.setEnabled(false);
        else checkMouse.setEnabled(true);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        lowHSVF = new javax.swing.JTextField();
        upperHSVF = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        KernelSpin = new javax.swing.JSpinner();
        opRadio = new javax.swing.JRadioButton();
        testRadio = new javax.swing.JRadioButton();
        checkMouse = new javax.swing.JCheckBox();
        startBT = new javax.swing.JButton();
        showBT = new javax.swing.JButton();
        stopBT = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        xlbl = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        ylbl = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        camIDX = new javax.swing.JSpinner();
        contCnt = new javax.swing.JLabel();
        contCNT = new javax.swing.JLabel();
        R1 = new javax.swing.JSpinner();
        jLabel8 = new javax.swing.JLabel();
        R2 = new javax.swing.JSpinner();
        jLabel9 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("H,S,V _ range");

        jLabel2.setText("Lower Limit");

        jLabel3.setText("Upper Limit");

        jLabel4.setText("Dilate Kernel");

        opRadio.setSelected(true);
        opRadio.setText("Operate");

        testRadio.setText("Test");

        checkMouse.setText("Perfrom mouse Events");

        startBT.setText("Start");
        startBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startBTActionPerformed(evt);
            }
        });

        showBT.setText("Show");
        showBT.setEnabled(false);
        showBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showBTActionPerformed(evt);
            }
        });

        stopBT.setText("Stop");
        stopBT.setEnabled(false);
        stopBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopBTActionPerformed(evt);
            }
        });

        jLabel5.setText("X :");

        jLabel7.setText("Y :");

        jLabel6.setText("Camera:");

        contCnt.setText("Cont:");

        contCNT.setText("-------------");

        jLabel8.setText("To");

        jLabel9.setText("Delay:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(4, 4, 4)
                                .addComponent(opRadio))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel6)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(testRadio, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(camIDX)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(stopBT, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(showBT, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(startBT, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(checkMouse)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel9)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(R1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(R2, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(contCnt)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(contCNT, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING))
                                    .addComponent(jLabel4)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel7))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(lowHSVF)
                                .addComponent(upperHSVF)
                                .addComponent(KernelSpin, javax.swing.GroupLayout.DEFAULT_SIZE, 128, Short.MAX_VALUE))
                            .addComponent(xlbl, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ylbl, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel6)
                    .addComponent(camIDX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lowHSVF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(testRadio)
                    .addComponent(opRadio))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(upperHSVF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(checkMouse))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(KernelSpin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(R1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel8)
                                .addComponent(R2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel9)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(xlbl, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(startBT))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel7)
                            .addComponent(ylbl, javax.swing.GroupLayout.DEFAULT_SIZE, 23, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(contCnt)
                            .addComponent(contCNT)
                            .addComponent(stopBT)))
                    .addComponent(showBT))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void startBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startBTActionPerformed
        long xy,zy;
        try {
            R1.commitEdit();
        } catch (ParseException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        xy=(long) R1.getValue();
        try {
            R2.commitEdit();
        } catch (ParseException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        zy=(long)R2.getValue();
        b1=min(xy,zy);b2=max(xy,zy);
        op=true;
          mouse=false;
         int camID;
        try {
            camIDX.commitEdit();
        } catch (ParseException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }
        camID=(int) camIDX.getValue();
        String lowHSV=lowHSVF.getText();
        String upperHSV=upperHSVF.getText();
        try {
            KernelSpin.commitEdit();
        } catch (ParseException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }
        int kernel=(int) KernelSpin.getValue();
        if(testRadio.isSelected()){
            op=false;
        }
        else{
            mouse=checkMouse.isSelected();
        }
        try{
            System.out.println(camID);
            cap=new VideoCapture(camID);
            if(!cap.isOpened()){
                show_error("The camera is not open/detected,continure any way");
            }
            
            if(!isThread){
                flag=true;
                lowHSVF.setEnabled(false);
                upperHSVF.setEnabled(false);
                startBT.setEnabled(false);
                showBT.setEnabled(true);
                stopBT.setEnabled(true);
                new Thread(){
                    
                    private Mat mat=new Mat();
                    BufferedImage img;
                    public void getSpace(Mat mat) {
        int type = 0;
        if (mat.channels() == 1) {
            type = BufferedImage.TYPE_BYTE_GRAY;
        } else if (mat.channels() == 3) {
            type = BufferedImage.TYPE_3BYTE_BGR;
        }
        this.mat = mat;
        int w = mat.cols();
        int h = mat.rows();
        if (img == null || img.getWidth() != w || img.getHeight() != h || img.getType() != type)
            img = new BufferedImage(w, h, type);
    }

    BufferedImage getImage(Mat mat){
        getSpace(mat);
        WritableRaster raster = img.getRaster();
        DataBufferByte dataBuffer = (DataBufferByte) raster.getDataBuffer();
        byte[] data = dataBuffer.getData();
        mat.get(0, 0, data);
        return img;
    }                boolean gap=false;
                    long begin;
                    @Override
                    public void run(){
                        isThread=true;
                        view =new Viwer();
                        try{
                            Robot rob=new Robot();
                            boolean op2=op,mouseFL=mouse;
                            Mat frame=new Mat();
                            String[] LHSV=lowHSV.split(","),UHSV=upperHSV.split(",");
                            int LH=Integer.parseInt(LHSV[0]),LS=Integer.parseInt(LHSV[1]),LV=Integer.parseInt(LHSV[2]);
                            int UH=Integer.parseInt(UHSV[0]),US=Integer.parseInt(UHSV[1]),UV=Integer.parseInt(UHSV[2]);
                            Scalar lowRangeScalar=new Scalar(LH,LS,LV);
                            Scalar upperRangeScalar=new Scalar(UH,US,UV);
                            int ker=kernel;
                            while(flag){
                                cap.read(frame);//read the Frame
                                Imgproc.cvtColor(frame, frame, Imgproc.COLOR_BGR2HSV);//convert to HSV
                                Core.inRange(frame, lowRangeScalar, upperRangeScalar, frame);
                                if(op2){
                                    Mat kerMat=Mat.ones(ker,ker, CvType.CV_8U);
                                    Imgproc.dilate(frame, frame, kerMat);
                                    List<MatOfPoint> contours=new ArrayList<>();
                                    Imgproc.findContours(frame, contours, new Mat(), Imgproc.RETR_EXTERNAL, Imgproc.CHAIN_APPROX_SIMPLE);
                                    contCNT.setText(Integer.toString(contours.size()));
                                    double maxArea=0;
                                    int maxAreaIDX=0;
                                    if(contours.size()>0){
                                    for (int idx=0;idx<contours.size();idx++){
                                    double area=Imgproc.contourArea(contours.get(idx));
                                    if(maxArea<area){
                                        maxArea=area;
                                        maxAreaIDX=idx;
                                    }
                                }
                                    Mat dst=Mat.zeros(frame.size(), CvType.CV_8UC3);
                                    Imgproc.drawContours(dst, contours, maxAreaIDX, new Scalar(0,255,255),10);
                                    MatOfPoint cont=contours.get(maxAreaIDX);
                                    Moments mom=Imgproc.moments(cont);
                                    int x=(int) (mom.get_m10()/mom.get_m00());
                                    int y=(int) (mom.get_m01()/mom.get_m00());
                                    xlbl.setText(Integer.toString(x));
                                    ylbl.setText(Integer.toString(y));
                                    if(mouseFL){rob.mouseMove(x, y);
                                        if(gap&&System.currentTimeMillis()-begin>b1&&System.currentTimeMillis()-begin<b2){gap=false;
                                            rob.mousePress(InputEvent.BUTTON1_MASK);
                                            rob.delay(1);
                                            rob.mouseRelease(InputEvent.BUTTON1_MASK);
                                        }
                                        gap=false;
                                    }
                                    view.paneFrame=getImage(dst);
                                    }else{view.paneFrame=getImage(frame);if(!gap){gap=true;begin=System.currentTimeMillis();}}
                                }else{
                                view.paneFrame=getImage(frame);}
                                view.paintingJob();
                                try{
                                    Thread.sleep(30);
                                }catch(Exception ex){}
                            }
                        }catch(Exception sad){
                            isThread=false;
                            showBT.setEnabled(false);
                            startBT.setEnabled(true);
                            stopBT.setEnabled(false);
                            lowHSVF.setEnabled(true);
                            upperHSVF.setEnabled(true);
                            
                            cap.release();
                        }
                    }
                }.start();
            }
            }
        catch(Exception ex){
            flag=false;
            showBT.setEnabled(false);
            startBT.setEnabled(true);
            stopBT.setEnabled(false);
            lowHSVF.setEnabled(true);
            upperHSVF.setEnabled(true);
            cap.release();
            System.out.println("SAD");
        }
    }//GEN-LAST:event_startBTActionPerformed
    boolean showFlag=false;
    private void showBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showBTActionPerformed
        if(!showFlag){
            showFlag=true;
            showBT.setText("Hide");
            view.setVisible(true);
        }else{
            showFlag=false;
            showBT.setText("Show");
            view.setVisible(false);
        }
    }//GEN-LAST:event_showBTActionPerformed

    private void stopBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopBTActionPerformed
            flag=false;
            showBT.setEnabled(false);
            startBT.setEnabled(true);
            stopBT.setEnabled(false);
            lowHSVF.setEnabled(true);
            upperHSVF.setEnabled(true);
            cap.release();
            HighGui.destroyAllWindows();
    }//GEN-LAST:event_stopBTActionPerformed
    private void show_error(String msg){
        new PopUpFrame(msg);
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSpinner KernelSpin;
    private javax.swing.JSpinner R1;
    private javax.swing.JSpinner R2;
    private javax.swing.JSpinner camIDX;
    private javax.swing.JCheckBox checkMouse;
    private javax.swing.JLabel contCNT;
    private javax.swing.JLabel contCnt;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JTextField lowHSVF;
    private javax.swing.JRadioButton opRadio;
    private javax.swing.JButton showBT;
    private javax.swing.JButton startBT;
    private javax.swing.JButton stopBT;
    private javax.swing.JRadioButton testRadio;
    private javax.swing.JTextField upperHSVF;
    private javax.swing.JLabel xlbl;
    private javax.swing.JLabel ylbl;
    // End of variables declaration//GEN-END:variables
}
